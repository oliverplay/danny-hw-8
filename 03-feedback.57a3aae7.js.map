{"mappings":"A,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,GCE+B,AAAA,A,C,S,C,E,O,G,E,U,C,E,O,C,C,C,E,E,UAAE,QAAA,CAAS,EAAa,KACvD,MAAM,EAAa,SAAS,aAAA,CAAc,SACpC,EAAW,SAAS,aAAA,CAAc,YAClC,EAAO,SAAS,aAAA,CAAc,QAYpC,SAAS,IACP,IAAM,EAAQ,EAAW,KAAzB,CACM,EAAU,EAAS,KAAzB,CAEA,GAAI,AAAU,KAAV,GAAgB,AAAY,KAAZ,EAAgB,CAElC,IAAM,EAAiB,KAAK,SAAA,CADX,CAAE,MAAA,EAAO,QAAA,CAAQ,GAElC,aAAa,OAAA,CAAQ,sBAAuB,EAC9C,CACF,CAOA,SAAS,IACP,IAAM,EAAe,KAAK,KAAA,CAAM,aAAa,OAAA,CAAQ,wBAEjD,IAEF,EAAK,QAAA,CAAS,KAAA,CAAM,KAAA,CAAQ,EAAa,KAAA,EAAS,GAClD,EAAK,QAAA,CAAS,OAAA,CAAQ,KAAA,CAAQ,EAAa,OAAA,EAAW,GAE1D,CA3BA,EAAW,gBAAA,CAAiB,QAAS,GACrC,EAAS,gBAAA,CAAiB,QAAS,GAgBnC,OAAO,gBAAA,CAAiB,OAAQ,GAiBhC,EAAK,gBAAA,CAAiB,SAAU,AAAA,IAC9B,EAAM,cAAN,GACA,IAAM,EAAQ,EAAK,QAAA,CAAS,KAAA,CAAM,KAAlC,CACM,EAAU,EAAK,QAAA,CAAS,OAAA,CAAQ,KAAtC,CAEA,QAAQ,GAAA,CADK,CAAE,MAAA,EAAO,QAAA,CAAQ,GAE9B,aAAa,UAAA,CAAW,uBACxB,EAAK,KAAL,EACF","sources":["<anon>","src/js/03-feedback.js"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n\nvar $kEUo3 = parcelRequire(\"kEUo3\");\nconst $945622fd0f572e60$var$throttledStorageUpdate = (0, (/*@__PURE__*/$parcel$interopDefault($kEUo3))).throttle($945622fd0f572e60$var$getFormData, 500);\nconst $945622fd0f572e60$var$emailField = document.querySelector(\"input\");\nconst $945622fd0f572e60$var$textArea = document.querySelector(\"textarea\");\nconst $945622fd0f572e60$var$form = document.querySelector(\"form\");\nlet $945622fd0f572e60$var$formObject = {};\n//Track input event on form//\n//Each time event is activated write to local storage an object//\n//Object contains email and message fields and saves the value //\n//in each field when the input event was activated//\n//Let the key for the storage be the \"feedback-form-state\" string.//\n$945622fd0f572e60$var$emailField.addEventListener(\"input\", $945622fd0f572e60$var$saveformData);\n$945622fd0f572e60$var$textArea.addEventListener(\"input\", $945622fd0f572e60$var$saveformData);\nfunction $945622fd0f572e60$var$saveformData() {\n    const email = $945622fd0f572e60$var$emailField.value;\n    const message = $945622fd0f572e60$var$textArea.value;\n    if (email !== \"\" || message !== \"\") {\n        const formData = {\n            email: email,\n            message: message\n        };\n        const formdataString = JSON.stringify(formData);\n        localStorage.setItem(\"feedback-form-state\", formdataString);\n    }\n}\n//after page loads check the state of storage. if it stores data//\n//use it to fill emailField and textArea.//\n//if the local storage object is empty then both fields must be empty//\nwindow.addEventListener(\"load\", $945622fd0f572e60$var$getFormData);\nfunction $945622fd0f572e60$var$getFormData() {\n    const storageState = JSON.parse(localStorage.getItem(\"feedback-form-state\"));\n    if (storageState) {\n        $945622fd0f572e60$var$formObject = storageState;\n        $945622fd0f572e60$var$form.elements.email.value = storageState.email || \"\";\n        $945622fd0f572e60$var$form.elements.message.value = storageState.message || \"\";\n    }\n}\n//clear storage and form field on form submit//\n//Display object with email and message fields and their current values//\n//within Console//\n//also remove any unwated default actions//\n$945622fd0f572e60$var$form.addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    const email = $945622fd0f572e60$var$form.elements.email.value;\n    const message = $945622fd0f572e60$var$form.elements.message.value;\n    $945622fd0f572e60$var$formObject = {\n        email: email,\n        message: message\n    };\n    console.log($945622fd0f572e60$var$formObject);\n    localStorage.removeItem(\"feedback-form-state\");\n    $945622fd0f572e60$var$form.reset();\n});\n\n\n//# sourceMappingURL=03-feedback.57a3aae7.js.map\n","import _ from 'lodash';\n\nconst throttledStorageUpdate = _.throttle(getFormData, 500);\nconst emailField = document.querySelector('input');\nconst textArea = document.querySelector('textarea');\nconst form = document.querySelector('form');\nlet formObject = {};\n\n//Track input event on form//\n//Each time event is activated write to local storage an object//\n//Object contains email and message fields and saves the value //\n//in each field when the input event was activated//\n//Let the key for the storage be the \"feedback-form-state\" string.//\n\nemailField.addEventListener('input', saveformData);\ntextArea.addEventListener('input', saveformData);\n\nfunction saveformData() {\n  const email = emailField.value;\n  const message = textArea.value;\n\n  if (email !== '' || message !== '') {\n    const formData = { email, message };\n    const formdataString = JSON.stringify(formData);\n    localStorage.setItem('feedback-form-state', formdataString);\n  }\n}\n//after page loads check the state of storage. if it stores data//\n//use it to fill emailField and textArea.//\n//if the local storage object is empty then both fields must be empty//\n\nwindow.addEventListener('load', getFormData);\n\nfunction getFormData() {\n  const storageState = JSON.parse(localStorage.getItem('feedback-form-state'));\n\n  if (storageState) {\n    formObject = storageState;\n    form.elements.email.value = storageState.email || '';\n    form.elements.message.value = storageState.message || '';\n  }\n}\n\n//clear storage and form field on form submit//\n//Display object with email and message fields and their current values//\n//within Console//\n//also remove any unwated default actions//\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const email = form.elements.email.value;\n  const message = form.elements.message.value;\n  formObject = { email, message };\n  console.log(formObject);\n  localStorage.removeItem('feedback-form-state');\n  form.reset();\n});\n"],"names":["$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$parcel$interopDefault","a","__esModule","default","throttle","$945622fd0f572e60$var$getFormData","$945622fd0f572e60$var$emailField","document","querySelector","$945622fd0f572e60$var$textArea","$945622fd0f572e60$var$form","$945622fd0f572e60$var$saveformData","email","value","message","formdataString","JSON","stringify","localStorage","setItem","storageState","parse","getItem","elements","addEventListener","event","preventDefault","console","log","removeItem","reset"],"version":3,"file":"03-feedback.57a3aae7.js.map"}